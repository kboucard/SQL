


#1. Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

SELECT * 
FROM city 
WHERE countrycode = 'USA' 
AND population > 100000;


#2. Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

SELECT name 
FROM city 
WHERE countrycode = 'USA' 
AND population > 120000;


#3. Query all columns (attributes) for every row in the CITY table.

SELECT * 
FROM city;


#4. Query all columns for a city in CITY with the ID 1661.

SELECT * 
FROM city 
WHERE ID = 1661;


#5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT * 
FROM city 
WHERE countrycode = 'JPN';


#6. Query a list of CITY and STATE from the STATION table.

SELECT city, state 
FROM station;


#7. Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

SELECT DISTINCT city 
FROM station 
WHERE MOD(ID,2)=0;


#8. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

SELECT COUNT(city)-COUNT(DISTINCT city) 
FROM station;


#9. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

SELECT City, LENGTH(City)
FROM Station
ORDER BY LENGTH(City) ASC, City LIMIT 1;


SELECT City, LENGTH(City)
FROM Station
ORDER BY LENGTH(City) DESC, City LIMIT 1;


#10. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT city 
FROM station 
WHERE LEFT(CITY, 1) IN ('a', 'e', 'i', 'o', 'u');


#11. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT city 
FROM station 
WHERE RIGHT(city,1) IN ('a','e','i','o','u');


#12. Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

SELECT distinct city 
FROM station 
WHERE LEFT(city,1) IN ('a','e','i','o','u') 
AND RIGHT(city,1) IN ('a','e','i','o','u');


#13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT city 
FROM station 
WHERE LEFT(city,1) NOT IN ('a','e','i','o','u');


#14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT city 
FROM station 
WHERE RIGHT(city,1) NOT IN ('a','e','i','o','u');


#15. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT city 
FROM station 
WHERE LEFT (city,1) NOT IN ('a','e','i','o','u') 
OR RIGHT (city,1) NOT IN ('a','e','i','o','u');


#16. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT city 
FROM station 
WHERE LEFT (city,1) NOT IN ('a','e','i','o','u') 
AND RIGHT (city,1) NOT IN ('a','e','i','o','u');


#17. Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT name FROM students 
WHERE marks > 75
ORDER BY RIGHT(name,3), ID ASC;


#18. Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

SELECT name FROM employee
ORDER BY name ASC;


#19. Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

SELECT name FROM employee 
WHERE salary > 2000 AND months < 10
ORDER BY employee_id ASC;


#20. You are given a table, Functions, containing two columns: X and Y. Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1. Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 â‰¤ Y1.

SELECT F1.X, F1.Y
FROM functions F1 
JOIN functions F2 
     ON F1.X = F2.Y AND F1.Y=F2.X
GROUP BY F1.X, F1.Y
HAVING COUNT(*) > 1 OR  F1.X < F1.Y
ORDER BY F1.X;


#21. Samantha interviews many candidates from different colleges using coding challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are .

SELECT
  contests.contest_id, 
  contests.hacker_id, 
  contests.name,
  SUM(submissions_sums.sum_submissions),
  SUM(submissions_sums.sum_accepted_submissions),
  SUM(views_sums.sum_views),
  SUM(views_sums.sum_unique_views)
FROM contests 
JOIN colleges on contests.contest_id = colleges.contest_id
JOIN challenges on colleges.college_id = challenges.college_id

LEFT JOIN
(SELECT
  challenge_id,
  SUM(total_submissions) AS sum_submissions,
  SUM(total_accepted_submissions) AS sum_accepted_submissions
  FROM submission_stats GROUP BY challenge_id) 
AS submissions_sums
ON challenges.challenge_id = submissions_sums.challenge_id


LEFT JOIN
(SELECT 
  challenge_id,
  SUM(total_views) AS sum_views,
  SUM(total_unique_views) AS sum_unique_views
  FROM view_stats GROUP BY challenge_id) 
AS views_sums
ON challenges.challenge_id = views_sums.challenge_id

GROUP BY contests.contest_id, contests.hacker_id, contests.name

HAVING(
  SUM(submissions_sums.sum_submissions) +
  SUM(submissions_sums.sum_accepted_submissions) +
  SUM(views_sums.sum_views) +
  SUM(views_sums.sum_unique_views)
) > 0

ORDER BY contests.contest_id;


#22. 












